#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Mon May  7 09:19:21 2018

@author: daniel
"""

import numpy as np
from QuantLib import * 
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1.inset_locator import inset_axes
import seaborn as sns
import pandas as pd
plt.style.use('seaborn-whitegrid')

today = Date(11, December, 2012)
Settings.instance().evaluationDate = today

'''
Data as in EONIA_example
'''

eonia = Eonia()

depos = [(0.04, 0), (0.04, 1), (0.04, 2)]

helpers = [ DepositRateHelper(QuoteHandle(SimpleQuote(rate/100)), Period(1,Days), fixingDays, TARGET(), Following, False, Actual360())
            for rate, fixingDays in depos ]

ois_quotes1 = [(0.070, (1,Weeks)), (0.069, (2,Weeks)), (0.078, (3,Weeks)), (0.074, (1,Months))]

helpers += [ OISRateHelper(2, Period(*tenor), QuoteHandle(SimpleQuote(rate/100)), eonia) 
            for rate, tenor in ois_quotes1 ]

ois_fras = [(0.046, Date(16,January,2013), Date(13,February,2013)), (0.016, Date(13,February,2013), Date(13,March,2013)),
            (-0.007, Date(13,March,2013), Date(10,April,2013)), (-0.013, Date(10,April,2013), Date(8,May,2013)),
            (-0.014, Date(8,May,2013), Date(12,June,2013)) ]

helpers += [ DatedOISRateHelper(start_date, end_date, QuoteHandle(SimpleQuote(rate/100)), eonia) 
            for rate, start_date, end_date in ois_fras ]


ois_quotes2 = [(0.002, (15,Months)), (0.008, (18,Months)), (0.021, (21,Months)), (0.036, (2,Years)), 
              (0.127, (3,Years)), (0.274, (4,Years)), (0.456, (5,Years)), (0.647, (6,Years)), 
              (0.827, (7,Years)), (0.996, (8,Years)), (1.147, (9,Years)), (1.280, (10,Years)),
              (1.404, (11,Years)), (1.516, (12,Years)), (1.764, (15,Years)), (1.939, (20,Years)),
              (2.003, (25,Years)), (2.038, (30,Years))]

helpers += [ OISRateHelper(2, Period(*tenor), QuoteHandle(SimpleQuote(rate/100)), eonia) 
            for rate, tenor in ois_quotes2 ]

eonia_curve = PiecewiseLogCubicDiscount(0, TARGET(), helpers, Actual360())

eonia_curve.enableExtrapolation()


'''
EURIBOR 6 Months
'''

euribor6m = Euribor6M()

'''
The first instrument used in the paper if the TOM
6-months FRA, which can be instantiated as a 6-months deposit with 3 fixing days; its rate (and
those of all other FRAs) is retrieved from figure 6 in the paper.
'''

helpers = [ DepositRateHelper(QuoteHandle(SimpleQuote(0.312/100)), Period(6,Months), 3,
                              TARGET(), Following, False, Actual360()) ]


'''
6-months FRA up to 2 years maturity
'''

e6m_fras = [(0.293, 1), (0.272, 2), (0.260, 3), (0.256, 4), (0.252, 5), (0.248, 6),
            (0.254, 7), (0.261, 8), (0.267, 9),(0.279, 10), (0.291, 11), (0.303, 12),
            (0.318, 13), (0.335, 14), (0.352, 15), (0.371, 16), (0.389, 17), (0.409, 18)]

helpers += [ FraRateHelper(QuoteHandle(SimpleQuote(rate/100)), start, euribor6m) 
            for rate, start in e6m_fras ]


'''
series of swap rates with maturities from 3 to 60 years
all the payments will be discounted by means of the OIS curve, which is 
wrapped in a Handle and passed as an extra argument to the SwapRateHelper constructor.
'''

discount_curve = RelinkableYieldTermStructureHandle()
discount_curve.linkTo(eonia_curve)

e6m_swaps = [(0.424, 3), (0.576, 4), (0.762, 5), (0.954, 6), (1.135, 7), (1.303, 8),
             (1.452, 9), (1.584, 10), (1.809, 12), (2.037, 15), (2.187, 20), 
             (2.234, 25), (2.256, 30), (2.295, 35), (2.348, 40), (2.421, 50), (2.463, 60)]


helpers += [ SwapRateHelper(QuoteHandle(SimpleQuote(rate/100)), Period(tenor, Years), 
                            TARGET(), Annual, Unadjusted, Actual360(), euribor6m, 
                            QuoteHandle(), Period(0, Days), discount_curve) 
            for rate, tenor in e6m_swaps ]

euribor6m_curve = PiecewiseLogCubicDiscount(2, TARGET(), helpers, Actual360())
euribor6m_curve.enableExtrapolation()


spot = euribor6m_curve.referenceDate()
dates = [ spot+Period(i,Months) for i in range(0, 60*12+1) ]

e6m_rates = [ euribor6m_curve.forwardRate(d, euribor6m.maturityDate(d), Actual360(), Simple).rate()
            for d in dates ]

dates_plot = [float(x - today)/360 for x in dates]

'''
you can see a glitch (some kind of dip) in the last part of 2014,
when the FRA strip ends
'''

last_fra_start = e6m_fras[-1][1]
last_fra_start = today + Period(last_fra_start, Months)
last_fra_end = last_fra_start + Period(6, Months)

last_fra_start = float(last_fra_start - today)/360
last_fra_end = float(last_fra_end - today)/360

fig, ax = plt.subplots()

ax.plot(dates_plot, e6m_rates)

axins = inset_axes(ax, 4, 2 , loc=4)
axins.plot(dates_plot, e6m_rates)


x1, x2, y1, y2 = 0, 3, 0.0022, 0.0115 # specify the limits2.5
axins.set_xlim(x1, x2) # apply the x-limits
axins.set_ylim(y1, y2) # apply the y-limits
axins.axvline( x = last_fra_start, c = 'green' )
axins.axvline( x = last_fra_end, c = 'green' )

plt.yticks(visible=False)
plt.xticks(visible=False)

from mpl_toolkits.axes_grid1.inset_locator import mark_inset
mark_inset(ax, axins, loc1=2, loc2=4, fc="none", ec="0.5")